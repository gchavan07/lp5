HPC 2A




#include<iostream>
#include<stdlib.h>
#include<omp.h>

using namespace std;

// Function prototypes
void bubble(int *, int);
void swap(int &, int &);

// Bubble sort function
void bubble(int *a, int n) {
    for (int i = 0; i < n; i++) {
        int first = i % 2;
        
        // OpenMP parallelization
        #pragma omp parallel for shared(a, first)
        for (int j = first; j < n - 1; j += 2) {
            if (a[j] > a[j + 1]) {
                swap(a[j], a[j + 1]);
            }
        }
    }
}

// Function to swap two integers
void swap(int &a, int &b) {
    int test;
    test = a;
    a = b;
    b = test;
}

// Main function
int main() {
    int *a, n;
    cout << "\n enter total no of elements=>";
    cin >> n;
    a = new int[n];
    cout << "\n enter elements=>";
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    bubble(a, n);
    cout << "\n sorted array is=>";
    for (int i = 0; i < n; i++) {
        cout << a[i] << endl;
    }
    delete[] a; // Don't forget to free the allocated memory
    return 0;
}

output

enter total no of elements=>5

 enter elements=>12
89
88
87
86

 sorted array is=>12
86
87
88
89