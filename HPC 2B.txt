HPC 2B



#include<stdio.h>
#include<omp.h>

// Function prototypes
void merge(int array[], int low, int mid, int high);
void mergesort(int array[], int low, int high);

// Merge function
void merge(int array[], int low, int mid, int high) {
    int temp[30];
    int i, j, k, m;
    j = low;
    m = mid + 1;
    for (i = low; j <= mid && m <= high; i++) {
        if (array[j] <= array[m]) {
            temp[i] = array[j];
            j++;
        } else {
            temp[i] = array[m];
            m++;
        }
    }
    if (j > mid) {
        for (k = m; k <= high; k++) {
            temp[i] = array[k];
            i++;
        }
    } else {
        for (k = j; k <= mid; k++) {
            temp[i] = array[k];
            i++;
        }
    }
    for (k = low; k <= high; k++) 
        array[k] = temp[k];
}

// Merge sort function
void mergesort(int array[], int low, int high) {
    int mid;
    if (low < high) {
        mid = (low + high) / 2;
        
        // OpenMP parallel sections
        #pragma omp parallel sections num_threads(2)
        {
            // First section for sorting left half
            #pragma omp section
            {
                mergesort(array, low, mid);
            }
            
            // Second section for sorting right half
            #pragma omp section
            {
                mergesort(array, mid + 1, high);
            }
        }
        merge(array, low, mid, high); // Merge the sorted halves
    }
}

// Main function
int main() {
    int array[50];
    int i, size;
    printf("Enter total number of elements: ");
    scanf("%d", &size);
    printf("Enter %d elements:\n", size);
    for (i = 0; i < size; i++) {
        scanf("%d", &array[i]);
    }
    mergesort(array, 0, size - 1);
    printf("Sorted Elements:\n");
    for (i = 0; i < size; i++)
        printf("%d ", array[i]);
    printf("\n");
    return 0;
}




output

Enter total number of elements: 7
Enter 7 elements:
13
90
80
88
751
2
44
Sorted Elements:
2 13 44 75 80 88 90 